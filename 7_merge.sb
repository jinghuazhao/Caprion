#!/usr/bin/bash

#SBATCH --job-name=_merge
#SBATCH --account=PETERS-SL3-CPU
#SBATCH --partition=cclake
#SBATCH --mem=28800
#SBATCH --time=12:00:00

##SBATCH --account CARDIO-SL0-CPU
##SBATCH --partition cardio
##SBATCH --qos=cardio

##SBATCH --array=1-987
##SBATCH --export ALL
##SBATCH --output=/rds/user/jhz22/hpc-work/work/_merge_%A_%a.o
##SBATCH --error=/rds/user/jhz22/hpc-work/work/_merge_%A_%a.e

#SBATCH --array=1-1266
#SBATCH --output=/rds/user/jhz22/hpc-work/work/_dat_%A_%a.o
#SBATCH --error=/rds/user/jhz22/hpc-work/work/_dat_%A_%a.e

export TMPDIR=${HPC_WORK}/work
export caprion=~/Caprion
export p=$(awk 'NR==ENVIRON["SLURM_ARRAY_TASK_ID"]{print $1}' ${caprion}/pilot/work/caprion.varlist)

function pgz()
# 1. extract all significant SNPs, alternatively log(5e-8/987)/log(10)
{
# zcat METAL/{}-1.tbl.gz | head -1
  zcat ${caprion}/analysis/METAL/${p}-1.tbl.gz | \
  awk 'NR>1 && $12<=log(5e-8)/log(10)' | \
  sort -k1,1n -k2,2n | \
  gzip -f > ${caprion}/analysis/METAL/sentinels/${p}.p.gz
}

function _HLA()
# 2. handling HLA
{
  (
    zcat ${caprion}/analysis/METAL/${p}-1.tbl.gz | awk -vOFS="\t" 'NR==1{$1="Chrom";$2="Start" "\t" "End";print}'
    zcat ${caprion}/analysis/METAL/sentinels/${p}.p.gz | \
    awk -vOFS="\t" '{$1="chr" $1; start=$2-1;$2=start "\t" $2;print}' | \
    awk '!($1 == "chr6" && $3 >= 25392021 && $3 < 33392022)'
    zcat ${caprion}/analysis/METAL/sentinels/${p}.p.gz | \
    awk -vOFS="\t" '{$1="chr" $1; start=$2-1;$2=start "\t" $2;print}' | \
    awk '$1 == "chr6" && $3 >= 25392021 && $3 < 33392022' | \
      sort -k13,13g | \
      awk 'NR==1'
  ) > ${caprion}/analysis/METAL/sentinels/${p}_nold.p
  export lines=$(wc -l ${caprion}/analysis/METAL/sentinels/${p}_nold.p | cut -d' ' -f1)
  if [ $lines -eq 1 ]; then
     echo removing ${p}_nold with $lines lines
     rm ${caprion}/analysis/METAL/sentinels/${p}_nold.p
  fi
}

function sentinels()
{
  (
    mergeBed -i ${caprion}/analysis/METAL/sentinels/${p}_nold.p -d 1000000 -c 13 -o min | \
    awk -v OFS="\t" -v trait=${p} '
    {
      if(NR==1) print "Chrom", "Start", "End", "P", "trait"
      print $0, trait
    }'
  ) > ${caprion}/analysis/METAL/sentinels/${p}.merged
  (
    cut -f1-4,13 ${caprion}/analysis/METAL/sentinels/${p}_nold.p| \
    bedtools intersect -a ${caprion}/analysis/METAL/sentinels/${p}.merged -b - -wa -wb | \
    awk '$4==$10' | \
    cut -f1-5,9,10 | \
    awk -v OFS="\t" -v trait=${p} '
    {
      if(NR==1) print "Chrom", "Start", "End", "P", "trait", "MarkerName", "CHR", "POS", "SNP", "P_check"
      chr=gsub(/chr/,"",$1)
      print $1,$2,$3,$4,trait,$1":"$3,chr,$3,$6,$7
    }'
  ) | uniq > ${caprion}/analysis/METAL/sentinels/${p}.sentinels

  Rscript -e '
    d <- file.path(Sys.getenv("caprion"),"analysis","METAL","sentinels")
    prot <- Sys.getenv("p")
    f <- file.path(d,paste0(prot,".sentinels"))
    m <- read.table(f,header=TRUE,as.is=TRUE)
    dim(m)
    head(m)
    suppressMessages(library(dplyr))
    t <- m %>% group_by(trait,Chrom,Start,End) %>% slice(which.min(P))
    t
    P <- with(m,P)
    p <- table(P)[table(P)>1]
    print(p)
    m <- subset(t,MarkerName!=".")
    cols <- c(1:5,9)
    write.table(m[,cols],file=file.path(d,paste0(prot,".signals")),row.names=FALSE,quote=FALSE,sep="\t")
  '
}

# for cmd in pgz _HLA sentinels; do $cmd; done

function mean_by_genotype()
{
  export caprion=~/Caprion
  read prot chr bp pqtl < <(awk 'NR==ENVIRON["SLURM_ARRAY_TASK_ID"]+1{gsub(/23/,"X",$2);print $1,$2,$3,$4}' ${caprion}/analysis/work/caprion.merge)
  export prot=${prot}
  export chr=${chr}
  export bp=${bp}
  export pqtl=${pqtl}
  for batch in {1..3}
  do
    export batch=${batch}
    export out=${caprion}/analysis/pgwas/means/caprion-${batch}-${prot}-${pqtl}
    plink-2 --bgen ${caprion}/pilot/work/chr${chr}.bgen ref-unknown \
            --sample ${caprion}/analysis/work/caprion.sample \
            --chr ${chr} --from-bp ${bp} --to-bp ${bp} \
            --keep ${caprion}/pilot/work/caprion-${batch}.id \
            --pheno ${caprion}/pilot/work/caprion-${batch}.pheno --pheno-name ${prot} \
            --recode oxford \
            --out ${out}
    paste <(awk 'NR>2{print $1,$5}' ${out}.sample) \
          <(awk '{for(i=0;i<(NF-5)/3;i++) print $1,$2,$3,$4,$5, $(6+i),$(7+i),$(8+i)}' ${out}.gen) > ${out}.dat
    rm ${out}.gen ${out}.sample ${out}.log
    Rscript -e '
       suppressMessages(library(dplyr))
       datfile <- Sys.getenv("out");
       dat <- read.table(paste0(datfile,".dat"),col.names=c("IID","pheno","chr","rsid","pos","A1","A2","g1","g2","g3")) %>%
              mutate(g=paste0(g1,g2,g3)) %>%
              group_by(g) %>%
              summarise(n=n(),m=mean(pheno))
       print(dat)
    '
  done
}

mean_by_genotype
