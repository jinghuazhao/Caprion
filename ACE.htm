<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/locuszoom@0.14.0/dist/locuszoom.css" type="text/css" crossorigin="anonymous"/>
    <script src="https://cdn.jsdelivr.net/npm/d3@^5.16.0" type="application/javascript"></script>
    <script src="https://cdn.jsdelivr.net/npm/locuszoom@0.14.0/dist/locuszoom.app.min.js" type="application/javascript"></script>
    <script src="https://cdn.jsdelivr.net/npm/locuszoom@0.14.0/dist/ext/lz-dynamic-urls.min.js" type="application/javascript"></script>
    <script src="https://cdn.jsdelivr.net/npm/locuszoom@0.14.0/dist/ext/lz-tabix-source.min.js" type="application/javascript"></script>
    <title>LocusZoom.js</title>
    <style>
      body {
        background-color: #FAFAFA;
        margin: 0px 20px;
      }
      img {
        max-width: 100%;
        box-sizing: border-box;
      }
      div.example > a > h6 {
        margin-bottom: 0.5em;
      }
      div.example > a > img {
        border: 1px solid #8A8A8A;
        margin-bottom: 1.4em;
      }
    </style>
  </head>
  <body>
    <div id="lz-plot"></div>
    <a href="ACE.json">ACE: data</a>,
    <div id="assoc-container"></div>
    <script src="ACE.js"></script>
    <script type="text/javascript">
    var apiBase = "https://portaldev.sph.umich.edu/api/v1/";
    const AssociationLZ = LocusZoom.Adapters.get('AssociationLZ');
    var data_sources = new LocusZoom.DataSources()
    .add('assoc', ['StaticJSON', { data: input.data }])
//  .add("assoc", ["AssociationLZ", { url: "https://localhost:22/public_html/Caprion/ACE.json", source: null, id_field: 'variant' }])
    .add("ld", ["LDServer", { url: "https://portaldev.sph.umich.edu/ld/", source: '1000G', build: 'GRCh37', population: 'ALL' }])
    .add("gene", ["GeneLZ", { url: apiBase + "annotation/genes/", build: 'GRCh37' }])
    .add("recomb", ["RecombLZ", { url: apiBase + "annotation/recomb/results/", build: 'GRCh37' }])
    .add("constraint", ["GeneConstraintLZ", { url: "https://gnomad.broadinstitute.org/api/", build: 'GRCh37' }]);
    function jumpTo(region) {
      var stateUrlMapping = {chr: "chrom", start: "start", end: "end", ldrefvar: 'ld_variant' };
      var initialState = LzDynamicUrls.paramsFromUrl(stateUrlMapping);
      var target = region.split(":");
      var chr = target[0];
      var pos = target[1];
      var start = 0;
      var end = 0;
      if (!pos.match(/[-+]/)) {
        start = +pos - 250000;
        end = +pos + 250000
      }
      if (!Object.keys(initialState).length) {
        initialState = {chr: chr, start: start, end: end};
      }
      layout = LocusZoom.Layouts.get("plot", "standard_association", {state: initialState});
      window.plot = LocusZoom.populate("#lz-plot", data_sources, layout);
      LzDynamicUrls.plotUpdatesUrl(plot, stateUrlMapping);
      plot.applyState({ chr: chr, start: start, end: end, ldrefvar: "" });
      return false;
    }
    jumpTo('17:61570422');
    fetch('ACE.json')
      .then(response => response.json())
      .then(data => {
         const assoc = data.assoc;
         const assocContainer = document.getElementById('assoc-container');
         assoc.forEach(assoc => {
           const assocElement = document.createElement('div');
           assocElement.innerHTML = `${assoc.variant}, ${assoc.position}, ${assoc.alt_allele}, {assoc.beta}, ${assoc.log_pvalue}<br>`;
           assocContainer.appendChild(assocElement);
         });
        })
        .catch(error => {console.error('Error fetching data:', error);});
    </script>
  </body>
</html>
