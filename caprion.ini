# 18-2-2020 JHZ

caprion_xlsx <- function()
{
  library(openxlsx)
  # list
  protein_list <- read.xlsx("Caprion_pilot_protein_list.xlsx")
  # workbook
  wb <- "ZWK_EDR_20191002.xlsx"
  Legend <- read.xlsx(wb, sheet = 1, startRow = 3)
  Samples <- read.xlsx(wb, sheet = 2, startRow = 5)
  Annotations <- read.xlsx(wb, sheet = 3, startRow = 5)
  rawIGs <- read.xlsx(wb, sheet = 4, startRow = 5)
  Normalized_Peptides <- read.xlsx(wb, sheet = 5, startRow = 5)
  Protein_All_Peptides <- read.xlsx(wb, sheet = 6, startRow = 5)
  Protein_DR_Filt_Peptides <- read.xlsx(wb, sheet = 7, startRow = 5)
  save(protein_list,Legend,Samples,Annotations,rawIGs,Normalized_Peptides,Protein_All_Peptides,Protein_DR_Filt_Peptides,file="caprion.rda")
}

tromso_xlsx <- function()
{
  wb <- "solomon18s.xlsx"
  library(openxlsx)
  sheet3 <- read.xlsx(wb, sheet = 3, startRow = 1)
  list(sheet3=sheet3)
}

caprion_inf <- function()
{
  tmp <- read.delim("inf1.tmp",as.is=TRUE,col.names=c("prot","uniprot"))
  olink_inf1 <- read.delim("olink.inf.panel.annot.tsv",as.is=TRUE)[c("target","target.short","uniprot","panel","hgnc_symbol")]
  inf1 <- merge(tmp,olink_inf1,by="uniprot")
  caprion_chk <- merge(inf1,protein_list[c("Accession","Protein","Gene")],by.x="uniprot",by.y="Accession")
  write.csv(caprion_chk,file="caprion_inf1.chk",row.names=FALSE,quote=FALSE)
  source("utils/olink.inc")
  xlsx <- "Olink validation data all panels.xlsx"
  tabs <- c("CVD II","CVD III","Inflammation","Neurology")
  olink_panel(xlsx,tabs,TRUE,92,FALSE)
  caprion_inf1 <- merge(protein_list[c("Accession","Protein","Gene")],Inflammation[c("Target","UniProt.No.")],by.x="Accession",by.y="UniProt.No.")
  write.csv(caprion_inf1,file="caprion_inf1.csv",row.names=FALSE,quote=FALSE)
  caprion_cvd2 <- merge(protein_list[c("Accession","Protein","Gene")],CVD_II[c("Target","UniProt.No.")],by.x="Accession",by.y="UniProt.No.")
  write.csv(caprion_cvd2,file="caprion_cvd2.csv",row.names=FALSE,quote=FALSE)
  caprion_cvd3 <- merge(protein_list[c("Accession","Protein","Gene")],CVD_III[c("Target","UniProt.No")],by.x="Accession",by.y="UniProt.No")
  write.csv(caprion_cvd3,file="caprion_cvd3.csv",row.names=FALSE,quote=FALSE)
  caprion_neurology <- merge(protein_list[c("Accession","Protein","Gene")],Neurology[c("Target","UniProt.No")],by.x="Accession",by.y="UniProt.No")
  write.csv(caprion_neurology,file="caprion_neurology.csv",row.names=FALSE,quote=FALSE)
  somalogic <- read.delim("SOMALOGIC_Master_Table_160410_1129info.tsv",as.is=TRUE)
  caprion_somalogic <- merge(protein_list[c("Accession","Protein","Gene")],somalogic[c("Target","UniProt")],by.x="Accession",by.y="UniProt")
  write.csv(unique(caprion_somalogic),file="caprion_somalogic.csv",row.names=FALSE,quote=FALSE)
}

plotfun <- function(col) 
{
  d <- df[,col]
  xlab <- "Individual"
  ylab <- colnames(df)[col]
  plot(d, xlab=xlab, ylab = ylab, main=ylab, type = "p", cex=0.6)
  hist(d, xlab=ylab, main="")
  boxplot(d, horizontal=TRUE, cex=0.6)
}

regfun <- function(col)
{
  p <- df[,col]
  l <- lm(p~sex)
  s <- summary(l)
  c <- with(s,coefficients)
  r <- paste(colnames(df)[col],paste(s$coefficients[,4],collapse="\t"),sep="\t")
  cat(r,"\n",append=TRUE, file="sex.tsv", sep="")
  l <- lm(p~age+sex+bmi)
  s <- summary(l)
  c <- with(s,coefficients)
  r <- paste(colnames(df)[col],paste(s$coefficients[,4],collapse="\t"),sep="\t")
  cat(r,"\n",append=TRUE, file="lm.tsv", sep="")
}

ae <- function(X,hidden.layers=c(10,2,10),pdf="ae.pdf")
{
   require(ANN2)
   pdf(pdf)
   AE <- autoencoder(X, hidden.layers, loss.type = 'pseudo-huber',
                     activ.functions = c('tanh','linear','tanh'),
                     batch.size = 8, optim.type = 'adam',
                     n.epochs = 1000, val.prop = 0)
 # Plot loss during training
   plot(AE)
 # Make reconstruction and compression plots
   reconstruction_plot(AE, X)
   compression_plot(AE, X)
 # Reconstruct data and show states with highest anomaly scores
   recX <- reconstruct(AE, X)
   sort(recX$anomaly_scores, decreasing = TRUE)
   dev.off()
   save(AE,recX,file="ae.rda")
}

minmax <- function(x) (x - min(x, na.rm = TRUE))/(max(x, na.rm = TRUE) - min(x, na.rm = TRUE))

ae_caprion <- function(x,hidden.layers=c(987,197,987))
{
  library(ggplot2)
  library(plotly)
  library(keras)
  x_train <- apply(x, 2, minmax)
  x_train <- as.matrix(x_train)
  model <- keras_model_sequential()
  model %>%
    layer_dense(units = hidden.layers[1], activation = "tanh", input_shape = ncol(x_train)) %>%
    layer_dense(units = hidden.layers[2], activation = "tanh", name = "bottleneck") %>%
    layer_dense(units = hidden.layers[3], activation = "tanh") %>%
    layer_dense(units = ncol(x_train))
  summary(model)
  model %>% compile(loss = "mean_squared_error", optimizer = "adam")
  model %>% fit(x = x_train, y = x_train, epochs = 2000, verbose = 0)
  mse.ae2 <- evaluate(model, x_train, x_train)
  print(mse.ae2)
  intermediate_layer_model <- keras_model(inputs = model$input, outputs = get_layer(model, "bottleneck")$output)
  intermediate_output <- predict(intermediate_layer_model, x_train)
  pred <- model %>% predict(x_train)
  (x_train-pred)^2
}

load("caprion.rda")

# phenotypes
names(Samples) <- c("caprion_id","external_id","comment")
phenotypes <- read.delim("interval_caprion_pilot_samples_phenotype_data.tsv",as.is=TRUE)
phenotypes <- within(phenotypes,{
  age <- agepulse
  sex <- sexpulse
  bmi <- wt_bl/ht_bl/ht_bl
  crp <- crp_bl
  transf <- transf_bl
})
pd <- merge(phenotypes[c("caprion_id","affymetrix_gwasqc_bl","sex","age","bmi","crp","transf")],Samples,by="caprion_id")

td <- Protein_All_Peptides
pap <- merge(protein_list[c("Protein","Accession","Gene")], td, by="Protein")
rownames(td) <- gsub("_HUMAN","",td[,1])
t1 <- t(td[,-1])
td <- data.frame(caprion_id=row.names(t1),data.frame(t1))
pheno_protein <- merge(pd,td,by="caprion_id")
df <- pheno_protein[,-(1:8)]
d <- Protein_All_Peptides[,-1]

excl_id <- read.table("11-3.id", as.is=TRUE, header=TRUE)
eleven <- excl_id[1:11,1]
three <- excl_id[12:14,1]
idx11 <- colnames(d)%in%eleven
idx3 <- colnames(d)%in%three
group <- rep(1,ncol(d))
group[idx11] <- 2
group[idx3] <- 3
col.group=c("black","blue","red")

# source("utils/makeRLEboxplot.R")

extract_peptide <- function(protein="ERAP2")
{
  load("caprion.rda")
  d <- subset(Normalized_Peptides,Protein==paste0(protein,"_HUMAN"))
  tokeep <- -(1:6)
  dt <- t(d[,tokeep])
  colnames(dt) <- with(d,paste(Modified.Peptide.Sequence,Isotope.Group.ID,sep="_"))
  peptides <- data.frame(caprion_id=names(d)[tokeep],dt)
}

snptest_sample <- function(data,sample_file,ID_1="ID_1",ID_2="ID_2",missing="missing",C=NULL,D=NULL,P=NULL)
{
  cat(ID_1,ID_2,missing,C,D,P,file=sample_file)
  cat("\n",file=sample_file,append=TRUE)
  len_C <- length(C)
  len_D <- length(D)
  len_P <- length(P)
  cat("0 0 0",rep("C",len_C),rep("D",len_D),rep("P",len_P),file=sample_file,append=TRUE)
  cat("\n",file=sample_file,append=TRUE)
  write.table(data[c(ID_1,ID_2,missing,C,D,P)],file=sample_file,append=TRUE,row.names=FALSE,col.names=FALSE,quote=FALSE)
}

# d <- data.frame(ID_1=1,ID_2=1,missing=0,PC1=1,PC2=2,D1=1,P1=10)
# snptest_sample(d,"test",C=paste0("PC",1:2),D=paste0("D",1:1),P=paste0("P",1:1))

id1_id2_0 <- read.table("interval.samples",skip=2,col.names=c("ID_1","ID_2","missing"))
missing <- read.table("merged_imputation.missing",col.names=c("affymetrix_gwasqc_bl","missing"))
id1_id2_missing <- merge(id1_id2_0[,-3],missing,by.x="ID_1",by.y="affymetrix_gwasqc_bl")
eigenvec <- read.delim("merged_imputation.eigenvec")
covariates <- merge(pheno_protein[c("affymetrix_gwasqc_bl","sex","age","bmi")],eigenvec[,-1],
                    by.x="affymetrix_gwasqc_bl",by.y="IID")
id1_id2_missing_covariates <- merge(id1_id2_missing,covariates,by.x="ID_1",by.y="affymetrix_gwasqc_bl")
