#!/usr/bin/bash

#SBATCH --job-name=_impute
#SBATCH --account=PETERS-SL3-CPU
#SBATCH --partition=icelake-himem
#SBATCH --ntasks=4
#SBATCH --cpus-per-task=25
#SBATCH --mem=100000
#SBATCH --array=1-4
#SBATCH --time=12:00:00

#SBATCH --job-name=_impute
#SBATCH --account=PETERS-SL3-CPU
#SBATCH --partition=icelake-himem
#SBATCH --mem=50000
#SBATCH --array=1-987
#SBATCH --time=12:00:00
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=15

#SBATCH --error=/rds/project/rds-zuZwCZMsS0w/Caprion_proteomics/analysis/impute/slurm/impute_%A_%a.e
#SBATCH --output=/rds/project/rds-zuZwCZMsS0w/Caprion_proteomics/analysis/impute/slurm/impute_%A_%a.o


. /etc/profile.d/modules.sh
module purge
module load rhel8/default-icl
module load ceuadmin/R

export TMPDIR=${HPC_WORK}/work

function impute()
{
   export analysis=~/Caprion/analysis
   export p=$(awk 'NR==ENVIRON["SLURM_ARRAY_TASK_ID"]' ${analysis}/work/caprion_dr.varlist)
   if [ ! -d ${analysis}/impute/slurm ]; then mkdir -p ${analysis}/impute/slurm; fi
   R --no-save <<\ \ \ END
      suppressMessages(library(Biobase))
      suppressMessages(library(MsCoreUtils))
      suppressMessages(library(dplyr))
      suppressMessages(library(future.apply))
      suppressMessages(library(parallel))
      suppressMessages(library(tibble))
      suppressMessages(library(tidyselect))
      caprion <- "~/Caprion"
      load(file.path(caprion,"pilot","ZWK.rda"))
      load(file.path(caprion,"pilot","ZYQ.rda"))
      load(file.path(caprion,"pilot","UDP.rda"))
      load(file.path(caprion,"pilot","UHZ.rda"))
      load(file.path(caprion,"analysis","work","eSet.rda"))
      raw_ZYQ <- left_join(mapping_ZYQ,raw_ZYQ)
      raw_UDP <- left_join(mapping_UDP,raw_UDP)
      raw_UHZ <- left_join(mapping_UHZ[c("Isotope.Group.ID", "Protein")],raw_UHZ)
      load(file.path(caprion,"analysis","reports","peptide_csq.rda"))
      threshold <- 50000
      p <- Sys.getenv("p")
      for (code in c("ZWK","ZYQ","UDP","UHZ"))
      {
      cat(paste("Protein =",p),paste("code =",code),sep="\n")
      dr <- get(paste0("dr_",code))
      dr <- Biobase::exprs(subset(dr,paste0(p,"_HUMAN")==featureNames(dr))) %>% base::t()
      protein <- get(paste0("protein_",code))
      proteins <- rownames(protein)
      protein <- Biobase::exprs(subset(protein,paste0(p,"_HUMAN")==featureNames(protein))) %>% base::t()
      peptide <- get(paste0("peptide_",code))
      mapping <- get(paste0("mapping_",code)) %>%
                 dplyr::filter(Protein == paste0(p,"_HUMAN"))
      peptides <- pull(mapping,Isotope.Group.ID)
      peptide <- Biobase::exprs(subset(peptide,Biobase::featureNames(peptide) %in% peptides)) %>% base::t()
      raw <- get(paste0("raw_",code)) %>%
             dplyr::filter(Protein==paste0(p,"_HUMAN")) %>%
             dplyr::mutate(Isotope.Group.ID=as.integer(Isotope.Group.ID))
      samples <- grep(code,names(raw),value=TRUE)
      csq_isotope <- dplyr::transmute(mapping,isotope=as.integer(Isotope.Group.ID)) %>%
                     dplyr::left_join(peptide_cvt) %>%
                     dplyr::select(Gene,SNP,prot,isotope,Type) %>%
                     dplyr::left_join(peptide_csq,by=c("Gene"="gene","SNP"="rsid")) %>%
                     dplyr::rename(Isotope.Group.ID=isotope) %>%
                     dplyr::mutate(pav=if_else(is.na(ref.rsid.all),NA,1)) %>%
                     dplyr::group_by(Isotope.Group.ID) %>%
                     dplyr::summarize(pav=if_else(any(!is.na(pav)),1,0))
      isotope <- raw %>%
                 dplyr::left_join(csq_isotope) %>%
                 dplyr::select(1:6,pav,tidyselect::contains(code))
      isotope_pav <- isotope
      p10 <- sapply(1:nrow(isotope), function(x) quantile(isotope[x,samples],0.09999,na.rm=TRUE))
      isotope[samples][!is.na(isotope[samples])&(isotope[samples]<threshold|isotope[samples]<p10)] <- NA
      print(dim(isotope))
      result <- isotope
      log2n <- function(x) ifelse(is.na(x), NA, log2(x))
      result[samples] <- lapply(result[samples], log2n)
      impute <- function(r)
      {
        if (all(is.na(r))) {
            return(cbind(r, was_suppressed = TRUE, Isotope.Group.ID = result$Isotope.Group.ID))
        }
        tryCatch({
            imputed_row <- MsCoreUtils::impute_RF(r, MARGIN=2)
            return(cbind(imputed_row, was_suppressed = FALSE, Isotope.Group.ID = result$Isotope.Group.ID))
        }, error = function(e) {
            print(paste("Error encountered:", e))
            return(cbind(r, was_suppressed = TRUE, Isotope.Group.ID = result$Isotope.Group.ID))
        })
      }
      impute_parallel <- function(r) {
        n_cores <- as.integer(Sys.getenv("SLURM_CPUS_PER_TASK", unset = 1))
        n_rows <- nrow(r)
        if (n_rows<=500 || n_cores==1) {
          return(impute(r))
        }
        data_chunks <- split(r, rep(1:n_cores, each=ceiling(n_rows / n_cores), length.out=n_rows))
        imputed_data <- parallel::mclapply(data_chunks, impute, mc.cores=n_cores)
        do.call(rbind, imputed_data)
      }
      r <- result[,samples,drop=FALSE]
      impute_data <- impute_parallel(r)
      result[names(impute_data)] <- impute_data
      prot <- result %>%
          dplyr::select(Protein, all_of(samples)) %>%
          dplyr::group_by(Protein) %>%
          dplyr::summarize(across(all_of(samples),
                                  ~log2n(sum(2^.x, na.rm = TRUE) / n()),
                                  .names = "{col}")) %>%
          tibble::column_to_rownames(var = "Protein") %>%
          base::t()
      prot0 <- result %>%
               dplyr::filter(pav==0) %>%
               dplyr::select(Protein, all_of(samples)) %>%
               dplyr::group_by(Protein) %>%
               dplyr::summarize(across(all_of(samples),
                                       ~log2n(sum(2^.x, na.rm = TRUE) / n()),
                                       .names = "{col}")) %>%
               tibble::column_to_rownames(var = "Protein") %>%
               base::t()
      prot1 <- result %>%
               dplyr::filter(pav==1) %>%
               dplyr::select(Protein, all_of(samples)) %>%
               dplyr::group_by(Protein) %>%
               dplyr::summarize(across(all_of(samples),
                                       ~log2n(sum(2^.x, na.rm = TRUE) / n()),
                                       .names = "{col}")) %>%
               tibble::column_to_rownames(var = "Protein") %>%
               base::t()
      z <-list(code=code,proteins=proteins,p=p,peptides=peptides,samples=samples,
               dr=dr,protein=protein,peptide=peptide,isotope=isotope_pav,isotope_dr=isotope,csq=csq_isotope,
               impute=result,prot=prot,prot0=prot0,prot1=prot1)
      if(!dir.exists(file.path(analysis,"impute",code))) dir.create(file.path(analysis,"impute",code))
      switch(code,
        "ZWK" = {
          impute_ZWK <- z
          save(impute_ZWK, file = file.path(caprion, "analysis", "impute", "ZWK", paste0("impute_ZWK-",p,".rda")))
        },
        "ZYQ" = {
          impute_ZYQ <- z
          save(impute_ZYQ, file = file.path(caprion, "analysis", "impute", "ZYQ", paste0("impute_ZYQ-",p,".rda")))
        },
        "UDP" = {
          impute_UDP <- z
          save(impute_UDP, file = file.path(caprion, "analysis", "impute", "UDP", paste0("impute_UDP-",p,".rda")))
        },
        "UHZ" = {
          impute_UHZ <- z
          save(impute_UHZ, file = file.path(caprion, "analysis", "impute", "UHZ", paste0("impute_UHZ-",p,".rda")))
        },
        stop("Invalid code")
      )
      }
   END
}

function micombine()
{
   export analysis=~/Caprion/analysis
   Rscript -e '
      suppressMessages(library(dplyr))
      suppressMessages(library(mclust))
      suppressMessages(library(parallel))
      analysis <- Sys.getenv("analysis")
      proteins <- scan(file.path(analysis,"work","caprion_dr.varlist"),what="")
      srcdir <- file.path(analysis,"tests","impute")
      log2n <- function(x) ifelse(is.na(x), NA, log2(x))
      combine <- function(srcdir,code,impute)
      {
        prot_all <- prot_pav <- prot_vap <- NULL
        for (p in proteins) {
          f <- file.path(srcdir, code, paste0("impute_", code, "-", p, ".rda"))
          tryCatch({
            load(f)
            dat <- get(paste0("impute_", code))
            if (is.null(prot_all)) {
              prot_all <- prot_pav <- prot_vap <- data.frame(caprion_id=dat$samples)
            }
            prot <- dat$isotope %>%
                dplyr::select(Protein, all_of(dat$samples)) %>%
                dplyr::group_by(Protein) %>%
                dplyr::summarize(across(all_of(dat$samples),
                                        ~log2n(sum(.x, na.rm = TRUE) / n()),
                                        .names = "{col}")) %>%
                tibble::column_to_rownames(var = "Protein") %>%
                base::t()
            prot0 <- dat$isotope %>%
                     dplyr::filter(pav==0) %>%
                     dplyr::select(Protein, all_of(dat$samples)) %>%
                     dplyr::group_by(Protein) %>%
                     dplyr::summarize(across(all_of(dat$samples),
                                            ~log2n(sum(.x, na.rm = TRUE) / n()),
                                            .names = "{col}")) %>%
                     tibble::column_to_rownames(var = "Protein") %>%
                     base::t()
            prot1 <- dat$isotope %>%
                     dplyr::filter(pav==1) %>%
                     dplyr::select(Protein, all_of(dat$samples)) %>%
                     dplyr::group_by(Protein) %>%
                     dplyr::summarize(across(all_of(dat$samples),
                                             ~log2n(sum(.x, na.rm = TRUE) / n()),
                                             .names = "{col}")) %>%
                     tibble::column_to_rownames(var = "Protein") %>%
                     base::t()
            if (impute) {
               prot_all <- dplyr::bind_cols(prot_all, dat$prot)
               prot_pav <- dplyr::bind_cols(prot_pav, dat$prot1)
               prot_vap <- dplyr::bind_cols(prot_vap, dat$prot0)
            } else {
               prot_all <- dplyr::bind_cols(prot_all, prot)
               prot_pav <- dplyr::bind_cols(prot_pav, prot1)
               prot_vap <- dplyr::bind_cols(prot_vap, prot0)
            }
          }, error = function(e) {
            warning(paste("Error loading file for protein:", p, "in code:", code, "- Error message:", e$message))
          })
        }
        if (!is.null(prot_all)) {
          prot_all[prot_all==-Inf] <- 0
          prot_pav[prot_pav==-Inf] <- 0
          prot_vap[prot_vap==-Inf] <- 0
          save(prot_all, file=file.path(srcdir, paste0("prot_all-", code, ".rda")))
          save(prot_pav, file=file.path(srcdir, paste0("prot_pav-", code, ".rda")))
          save(prot_vap, file=file.path(srcdir, paste0("prot_vap-", code, ".rda")))
        } else {
          warning(paste("No data to save for code:", code))
        }
      }
      mcplot <- function(srcdir,code,type)
      {
          load(file.path(srcdir,paste0("prot_",type,"-",code,".rda")))
          pdf(file.path(srcdir,paste0("prot_",type,"-",code,".pdf")))
          par(mfrow=c(2,2))
          prot <- get(paste0("prot_",type))
          prot_no_const <- prot[-1][, apply(prot[-1], 2, var) != 0]
          pca <- prcomp(prot_no_const, scale = TRUE)
          plot(pca$x[,1],pca$x[,2],xlab="PC1",ylab="PC2")
          pc1pc2 <- with(pca,x)[,1:2]
          mc <- Mclust(pc1pc2, G=4)
          scatterplot3d::scatterplot3d(with(pca,x[,c(1,2,3)]),color=c("blue","red")[mc$classification],
                                       main="Plot of the PC1, PC2 and PC3", pch=16)
          legend("right", legend=levels(as.factor(mc$classification)), col=c("blue", "red", "black","yellow"), pch=16)
          pca2 <- prcomp(prot_no_const,scale=FALSE)
          plot(pca2$x[,1],pca2$x[,2],xlab="PC1",ylab="PC2")
          pc1pc2 <- with(pca2,x)[,1:2]
          mc <- Mclust(pc1pc2, G=2)
          scatterplot3d::scatterplot3d(with(pca2,x[,c(1,2,3)]),color=c("blue","red")[mc$classification],
                                       main="Plot of the PC1, PC2 and PC3", pch=16)
          legend("right", legend=levels(as.factor(mc$classification)), col=c("blue", "red"), pch=16)
          dev.off()
      }
      combine_parallel <- function(srcdir, code, impute) {
        prot_all <- prot_pav <- prot_vap <- NULL
        protein_results <- mclapply(proteins, function(p) {
          f <- file.path(srcdir, code, paste0("impute_", code, "-", p, ".rda"))
          tryCatch({
            load(f)
            dat <- get(paste0("impute_", code))
            if (is.null(prot_all)) {
              prot_all <- prot_pav <- prot_vap <- data.frame(caprion_id = dat$samples)
            }
            prot <- dat$isotope %>%
              dplyr::select(Protein, all_of(dat$samples)) %>%
              dplyr::group_by(Protein) %>%
              dplyr::summarize(across(all_of(dat$samples),
                                      ~log2n(sum(.x, na.rm = TRUE) / n()),
                                      .names = "{col}")) %>%
              tibble::column_to_rownames(var = "Protein") %>%
              base::t()
            prot0 <- dat$isotope %>%
              dplyr::filter(pav == 0) %>%
              dplyr::select(Protein, all_of(dat$samples)) %>%
              dplyr::group_by(Protein) %>%
              dplyr::summarize(across(all_of(dat$samples),
                                      ~log2n(sum(.x, na.rm = TRUE) / n()),
                                      .names = "{col}")) %>%
              tibble::column_to_rownames(var = "Protein") %>%
              base::t()
            prot1 <- dat$isotope %>%
              dplyr::filter(pav == 1) %>%
              dplyr::select(Protein, all_of(dat$samples)) %>%
              dplyr::group_by(Protein) %>%
              dplyr::summarize(across(all_of(dat$samples),
                                      ~log2n(sum(.x, na.rm = TRUE) / n()),
                                      .names = "{col}")) %>%
              tibble::column_to_rownames(var = "Protein") %>%
              base::t()
            if (impute) {
              return(list(prot = dat$prot, prot1 = dat$prot1, prot0 = dat$prot0))
            } else {
              return(list(prot = prot, prot1 = prot1, prot0 = prot0))
            }
          }, error = function(e) {
            warning(paste("Error loading file for protein:", p, "in code:", code, "- Error message:", e$message))
            return(NULL)
          })
        }, mc.cores = 10)
        for (result in protein_results) {
          if (!is.null(result)) {
            prot_all <- dplyr::bind_cols(prot_all, result$prot)
            prot_pav <- dplyr::bind_cols(prot_pav, result$prot1)
            prot_vap <- dplyr::bind_cols(prot_vap, result$prot0)
          }
        }
        if (!is.null(prot_all)) {
          prot_all[prot_all == -Inf] <- 0
          prot_pav[prot_pav == -Inf] <- 0
          prot_vap[prot_vap == -Inf] <- 0
          save(prot_all, file = file.path(srcdir, paste0("prot_all-", code, ".rda")))
          save(prot_pav, file = file.path(srcdir, paste0("prot_pav-", code, ".rda")))
          save(prot_vap, file = file.path(srcdir, paste0("prot_vap-", code, ".rda")))
        } else {
          warning(paste("No data to save for code:", code))
        }
      }
      combine_apply <- function(srcdir, code, impute) {
        prot_all <- prot_pav <- prot_vap <- NULL
        plan(multisession, workers = availableCores())
        protein_results <- future_lapply(proteins, function(p) {
          f <- file.path(srcdir, code, paste0("impute_", code, "-", p, ".rda"))
          tryCatch({
            load(f)
            dat <- get(paste0("impute_", code))
            if (is.null(prot_all)) {
              prot_all <- prot_pav <- prot_vap <- data.frame(caprion_id = dat$samples)
            }
            prot <- dat$isotope %>%
              dplyr::select(Protein, all_of(dat$samples)) %>%
              dplyr::group_by(Protein) %>%
              dplyr::summarize(across(all_of(dat$samples),
                                      ~log2n(sum(.x, na.rm = TRUE) / n()),
                                      .names = "{col}")) %>%
              tibble::column_to_rownames(var = "Protein") %>%
              base::t()
            prot0 <- dat$isotope %>%
              dplyr::filter(pav == 0) %>%
              dplyr::select(Protein, all_of(dat$samples)) %>%
              dplyr::group_by(Protein) %>%
              dplyr::summarize(across(all_of(dat$samples),
                                      ~log2n(sum(.x, na.rm = TRUE) / n()),
                                      .names = "{col}")) %>%
              tibble::column_to_rownames(var = "Protein") %>%
              base::t()
            prot1 <- dat$isotope %>%
              dplyr::filter(pav == 1) %>%
              dplyr::select(Protein, all_of(dat$samples)) %>%
              dplyr::group_by(Protein) %>%
              dplyr::summarize(across(all_of(dat$samples),
                                      ~log2n(sum(.x, na.rm = TRUE) / n()),
                                      .names = "{col}")) %>%
              tibble::column_to_rownames(var = "Protein") %>%
              base::t()
            if (impute) {
              return(list(prot = dat$prot, prot1 = dat$prot1, prot0 = dat$prot0))
            } else {
              return(list(prot = prot, prot1 = prot1, prot0 = prot0))
            }
          }, error = function(e) {
            warning(paste("Error loading file for protein:", p, "in code:", code, "- Error message:", e$message))
            return(NULL)
          })
        })
        for (result in protein_results) {
          if (!is.null(result)) {
            prot_all <- dplyr::bind_cols(prot_all, result$prot)
            prot_pav <- dplyr::bind_cols(prot_pav, result$prot1)
            prot_vap <- dplyr::bind_cols(prot_vap, result$prot0)
          }
        }
        if (!is.null(prot_all)) {
          prot_all[prot_all == -Inf] <- 0
          prot_pav[prot_pav == -Inf] <- 0
          prot_vap[prot_vap == -Inf] <- 0
          save(prot_all, file = file.path(srcdir, paste0("prot_all-", code, ".rda")))
          save(prot_pav, file = file.path(srcdir, paste0("prot_pav-", code, ".rda")))
          save(prot_vap, file = file.path(srcdir, paste0("prot_vap-", code, ".rda")))
        } else {
          warning(paste("No data to save for code:", code))
        }
      }
      options(width=200)
      for (code in c("ZWK", "ZYQ", "UDP", "UHZ")) {
        cat(code, "\n")
        combine_parallel(srcdir,code,FALSE)
        mcplot(srcdir,code,"all")
      }
   '
}

impute
